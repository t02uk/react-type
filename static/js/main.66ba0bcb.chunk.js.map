{"version":3,"sources":["redux/scores.ts","Title.tsx","Typing.tsx","App.tsx","reportWebVitals.ts","redux/store.ts","index.tsx"],"names":["scoreSlice","createSlice","name","initialState","elapsedTimes","phase","reducers","addElapsedTime","state","action","payload","sort","lhs","rhs","switchPhase","actions","Title","dispatch","useDispatch","useState","started","setStarted","useSelector","handleKeyDown","useCallback","e","key","useEffect","window","addEventListener","removeEventListener","className","Array","from","map","_","rank","style","toFixed","TypingProblem","expectedSentence","nextSentence","onProblemSolved","inputtedSentence","setInputtedSentence","isCorrect","setIsCorrect","incorrectCount","setIncorrectCount","cleanedUp","startsWith","prevState","allMatched","useKeyMatcher","transitionName","transitionEnter","transitionEnterTimeout","transitionLeave","split","letter","index","substring","length","Typing","startedAt","expectedSentences","Object","keys","React","solvedCount","setSolvedCount","hasSolvedAll","elapsedTime","Date","transitionLeaveTimeout","sentence","App","view","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.66ba0bcb.chunk.js","sourcesContent":["import {createSlice, PayloadAction} from '@reduxjs/toolkit'\r\n\r\nexport type Phase = \"title\" | \"typing\";\r\n\r\nexport type State = {\r\n    elapsedTimes: Array<number>\r\n    phase: Phase\r\n};\r\n\r\nconst initialState: State = {\r\n    elapsedTimes: [],\r\n    phase: \"title\"\r\n\r\n}\r\n\r\nexport const scoreSlice = createSlice({\r\n    name: 'score',\r\n    initialState: initialState,\r\n    reducers: {\r\n        addElapsedTime: (state: State, action: PayloadAction<number>): State => {\r\n            const elapsedTimes = [action.payload, ...state.elapsedTimes];\r\n            elapsedTimes.sort((lhs, rhs) => lhs - rhs);\r\n            return {\r\n                ...state,\r\n                elapsedTimes,\r\n            }\r\n        },\r\n        switchPhase: (state: State, {payload: phase}: PayloadAction<Phase>): State => {\r\n            return {\r\n                ...state,\r\n                phase\r\n            }\r\n        }\r\n    },\r\n})\r\n\r\nexport const {\r\n    addElapsedTime,\r\n    switchPhase\r\n} = scoreSlice.actions\r\n\r\nexport default scoreSlice.reducer","import React, {useCallback, useEffect, useState} from \"react\";\r\nimport \"./Title.scss\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {State, switchPhase} from \"./redux/scores\";\r\n\r\nconst Title: React.FC = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const [started, setStarted] = useState(false);\r\n    const elapsedTimes = useSelector((state: State) => state.elapsedTimes);\r\n\r\n    const handleKeyDown = useCallback((e: KeyboardEvent) => {\r\n        if (e.key === \" \") {\r\n            setStarted(true);\r\n        }\r\n    }, [setStarted]);\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"keypress\", handleKeyDown);\r\n        return () => {\r\n            window.removeEventListener(\"keydown\", handleKeyDown);\r\n        }\r\n    }, [handleKeyDown]);\r\n\r\n    if (started) {\r\n        dispatch(switchPhase(\"typing\"));\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1 className=\"title\">\r\n                React Type.\r\n            </h1>\r\n            <div className=\"explanation\">\r\n                Hit the <u>spacebar</u> to start typing <span className=\"cursor\">_</span>\r\n            </div>\r\n            <table className={\"ranking\"}>\r\n                <tbody>\r\n                {Array.from(Array(10)).map((_, rank) => {\r\n                    return (\r\n                        <tr key={rank}>\r\n                            <td style={{\"width\": \"2rem\"}}>{rank + 1}</td>\r\n                            <td>{elapsedTimes[rank] ? elapsedTimes[rank].toFixed(3) : \"  _.___\"} Seconds</td>\r\n                        </tr>);\r\n                })}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default Title;","import React, {useCallback, useEffect, useState} from \"react\";\r\nimport \"./Typing.scss\"\r\nimport {CSSTransitionGroup} from \"react-transition-group\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {addElapsedTime, switchPhase} from \"./redux/scores\";\r\n\r\ntype KeyMatcherResult = {\r\n    inputtedSentence: string,\r\n    allMatched: boolean,\r\n    isCorrect: boolean\r\n    incorrectCount: number\r\n}\r\n\r\nconst useKeyMatcher = (expectedSentence: string): KeyMatcherResult => {\r\n    const [inputtedSentence, setInputtedSentence] = useState(\"\");\r\n    const [isCorrect, setIsCorrect] = useState(true);\r\n    const [incorrectCount, setIncorrectCount] = useState(0);\r\n    let cleanedUp = false;\r\n\r\n    const handleKeyDown = useCallback((e: KeyboardEvent) => {\r\n        if (cleanedUp) return;\r\n        if (expectedSentence.startsWith(inputtedSentence + e.key)) {\r\n            setInputtedSentence(inputtedSentence + e.key);\r\n            setIsCorrect(true);\r\n        } else {\r\n            setIsCorrect(false)\r\n            setIncorrectCount(prevState => prevState + 1);\r\n        }\r\n    }, [inputtedSentence, expectedSentence, cleanedUp]);\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"keypress\", handleKeyDown);\r\n        return () => {\r\n            // eslint-disable-next-line react-hooks/exhaustive-deps\r\n            cleanedUp = true;\r\n            window.removeEventListener(\"keydown\", handleKeyDown);\r\n        }\r\n    }, [handleKeyDown]);\r\n\r\n    const allMatched = expectedSentence === inputtedSentence;\r\n    return {inputtedSentence: inputtedSentence, allMatched, isCorrect, incorrectCount};\r\n};\r\n\r\ntype TypingProblemProps = {\r\n    expectedSentence: string,\r\n    nextSentence: string,\r\n    onProblemSolved: () => void,\r\n}\r\n\r\nconst TypingProblem: React.FC<TypingProblemProps> = ({expectedSentence, nextSentence, onProblemSolved}) => {\r\n\r\n    const {inputtedSentence, allMatched, isCorrect, incorrectCount} = useKeyMatcher(expectedSentence);\r\n\r\n    useEffect(() => {\r\n        if (allMatched) {\r\n            onProblemSolved();\r\n        }\r\n    }, [allMatched]);\r\n\r\n    return (\r\n        <>\r\n            <CSSTransitionGroup\r\n                transitionName=\"incorrect-effect\"\r\n                transitionEnter={true}\r\n                transitionEnterTimeout={1}\r\n                transitionLeave={false}\r\n            >\r\n                <span key={incorrectCount}>\r\n                    <CSSTransitionGroup\r\n                        transitionName=\"hit-effect\"\r\n                        transitionEnter={true}\r\n                        transitionEnterTimeout={150}\r\n                        transitionLeave={false}\r\n                    >\r\n                        {inputtedSentence.split(\"\").map((letter, index) => {\r\n                            return <span className=\"sentence sentence__inputted\" key={index}>{letter}</span>\r\n                        })}\r\n                    </CSSTransitionGroup>\r\n                    {expectedSentence.substring((inputtedSentence).length).split(\"\").map((letter, index) => {\r\n                        return <span className=\"sentence sentence__expected\" key={index}>{letter}</span>\r\n                    })};\r\n                    <div style={{\"marginTop\": \"4rem\"}}>\r\n                        <span className=\"sentence--next\">next &gt;&gt; </span>\r\n                        {nextSentence.split(\"\").map((letter, index) => {\r\n                            return <span className=\"sentence sentence--next\" key={index}>{letter}</span>\r\n                        })}\r\n                    </div>\r\n                </span>\r\n            </CSSTransitionGroup>\r\n        </>\r\n    );\r\n};\r\n\r\ntype Props = {\r\n    startedAt: number\r\n}\r\n\r\nconst Typing: React.FC<Props> = ({startedAt}) => {\r\n    const dispatch = useDispatch();\r\n    const expectedSentences = Object.keys(React);\r\n    const [solvedCount, setSolvedCount] = useState(0);\r\n    const onProblemSolved = useCallback(() => {\r\n        setSolvedCount(prevState => prevState + 1);\r\n    }, [setSolvedCount]);\r\n    const hasSolvedAll = expectedSentences.length === solvedCount;\r\n\r\n    useEffect(() => {\r\n        if (hasSolvedAll) {\r\n            const elapsedTime = 0.001 * (+new Date() - startedAt);\r\n            dispatch(addElapsedTime(elapsedTime));\r\n            dispatch(switchPhase(\"title\"));\r\n        }\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <CSSTransitionGroup\r\n                transitionName=\"switch-effect\"\r\n                transitionEnter={true}\r\n                transitionEnterTimeout={150}\r\n                transitionLeave={true}\r\n                transitionLeaveTimeout={250}\r\n            >\r\n                {expectedSentences.map((sentence, index) => {\r\n                    if (index === solvedCount) {\r\n                        const expectedSentence = expectedSentences[solvedCount];\r\n                        const nextSentence = expectedSentences.length <= solvedCount + 1 ? \"\" : expectedSentences[solvedCount + 1];\r\n                        return (\r\n                            <div className={\"container\"} style={{\r\n                                \"padding\": \"4rem\",\r\n                                \"position\": \"absolute\",\r\n                                \"left\": \"0px\",\r\n                                \"right\": \"0px\",\r\n                                \"margin\": \" 10rem auto\",\r\n                            }}\r\n                                 key={index}\r\n                            >\r\n                                <TypingProblem expectedSentence={expectedSentence}\r\n                                               nextSentence={nextSentence}\r\n                                               onProblemSolved={onProblemSolved}\r\n                                               key={index}\r\n                                />\r\n                            </div>\r\n                        );\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                })}\r\n            </CSSTransitionGroup>\r\n            <div className={\"meter\"}\r\n                 style={{\"width\": `${100.0 * solvedCount / expectedSentences.length}%`}}>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default Typing;","import React from 'react';\nimport './App.scss';\nimport Title from './Title';\nimport {useSelector} from \"react-redux\";\nimport {State} from \"./redux/scores\";\nimport Typing from \"./Typing\";\n\nfunction App() {\n\n    const phase = useSelector((state: State) => state.phase);\n    const view = phase === 'title' ? (<Title/>) :\n        phase === 'typing' ? (<Typing startedAt={+new Date()}/>) : null\n\n    return (\n        <div className=\"App\">\n            {view}\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport {scoreSlice} from \"./scores\";\r\n\r\nexport default configureStore({\r\n    reducer: scoreSlice.reducer,\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './redux/store'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}